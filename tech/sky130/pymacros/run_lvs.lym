<?xml version="1.0" encoding="utf-8"?>
<!--
# Copyright 2024 Efabless Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-->

<klayout-macro>
 <description>Run LVS</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>efabless_sky130</group-name>
 <menu-path>efabless_sky130>end("Efabless sky130").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>

import os, sys
import pya
from pya import Qt, QGroupBox, QDialogButtonBox, QVBoxLayout, QLabel, QCheckBox, QLineEdit, QGridLayout

path = os.path.dirname(os.path.abspath(__file__))

class LVSDialog(pya.QDialog): 
  """Dialog for LVS settings"""

  def __init__(self, parent = None): 
      pya.QDialog.__init__(self)

      self.parent = parent

      # Set the window title 
      self.setWindowTitle("Run LVS") 

      # Set the window size
      self.setGeometry(0, 0, 300, 150)

      # Center the window
      self.move(
        self.parent.geometry.center()
      )

      # Create a group box 
      self.formGroupBox = QGroupBox() 
      grid = QGridLayout(self.formGroupBox)

      # Default settings
      settings = {
        'spice_net_names' : True,
        'spice_comments' : True,
        'scale' : True,
        'verbose' : True,
        'schematic_simplify' : True,
        'net_only' : True,
        'top_lvl_pins' : True,
        'combine' : True,
        'purge' : True,
        'purge_nets' : True,
        'lvs_sub' : "sky130_gnd"
      }
      
      # Store widgets
      self.labels = []
      self.checkboxes = {}
      self.line_entries = {}
      
      # Generate labels, checkboxes and entries
      row = 0
      for key, value in settings.items():
          label = QLabel(key)
          grid.addWidget(label, row, 0)
          self.labels.append(label)

          # Create checkbox
          if isinstance(value, bool):
              checkbox = QCheckBox(self.formGroupBox)
              if value:
                  checkbox.setCheckState(Qt.Checked)
              else:
                  checkbox.setCheckState(Qt.Unchecked)

              grid.addWidget(checkbox, row, 1)
              self.checkboxes[key] = checkbox
          
          # Create entry
          if isinstance(value, str):
              line_entry = QLineEdit(value, self.formGroupBox)
              
              grid.addWidget(line_entry, row, 1)
              self.line_entries[key] = line_entry

          row += 1

      # Ok and Cancel dialog button
      self.buttonBox = QDialogButtonBox(self)
      self.ok = self.buttonBox.addButton(QDialogButtonBox.Ok)
      self.cancel = self.buttonBox.addButton(QDialogButtonBox.Cancel)

      # Actions when clicked
      self.cancel.clicked(lambda button: self.reject())
      self.ok.clicked(lambda button: self.accept())

      # Create a vertical layout 
      mainLayout = QVBoxLayout() 

      # Add form group box to the layout 
      mainLayout.addWidget(self.formGroupBox) 

      # Add button box to the layout 
      mainLayout.addWidget(self.buttonBox) 

      # Set the layout 
      self.setLayout(mainLayout)

# Get the schematic netlist
netlist_path = pya.FileDialog.ask_open_file_name("Choose the schematic netlist", '.', "SPICE (*.spice)")

# Check whether file exists
if not netlist_path or not os.path.isfile(netlist_path):
    print(f'Error: {netlist_path} is not a file!')
    sys.exit(0)

lvs_dialog = LVSDialog(pya.Application.instance().main_window())
run = lvs_dialog.exec_()

# Ok was clicked
if run:
    # Get the LVS interpreter
    interpreter = pya.Interpreter().ruby_interpreter()

    # Set the input parameters for the LVS script
    # For inout params one would need to pass pya.Value()
    interpreter.define_variable("schematic", netlist_path)

    # Add settings from dialog
    for key, checkbox in lvs_dialog.checkboxes.items():
        if checkbox.checkState == Qt.Checked:
            print(f'Setting {key} to true')
            interpreter.define_variable(key, 'true')
        else:
            print(f'Setting {key} to false')
            interpreter.define_variable(key, 'false')
    
    for key, line_entry in lvs_dialog.line_entries.items():
        value = line_entry.text
        print(f'Setting {key} to {value}')
        interpreter.define_variable(key, value)

    # Run the script
    pya.Macro(os.path.join(path, '../lvs/sky130.lvs')).run()

 </text>
</klayout-macro>
