# Copyright 2022 Mabrains
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Regression testing non fixed devices and other fixed devices than RF MOSFET
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
on:
  #push:
  #pull_request:
  workflow_dispatch:
env:
  DOCKER_BUILDKIT: 1

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      main_files: ${{ steps.set-matrix.outputs.main_files }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          cd sky130_tech/tech/sky130/lvs/testing
          main_files=`echo '[' ; find testcases/pass_cases/ ! -iname '*.cdl' -a ! -iname '*sky130_fd_pr__rf_*fet*'  | tr '\n' ','|sed -e 's/^/\"/'|sed -e 's/,$/\"]/'|sed -e 's/,/\", \"/g'`
          main_files="${main_files//'testcases/pass_cases/'/}"; main_files="${main_files//'"", '/}"; main_files="${main_files//'.gds'/}";
          main_files=`echo $main_files | jq -c .`
          echo $main_files
          #echo "::set-output name=main_files::$main_files"
          echo "main_files=$main_files" >>$GITHUB_OUTPUT
  Main:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        type: [lvs]
        test: [main]
        list: ${{ fromJson(needs.build-matrix.outputs.main_files) }}
    name: ${{ matrix.type }} | ${{ matrix.test }} ${{ matrix.list }}
    env:
      IMAGE: ghcr.io/mabrains/sky130_klayout_pdk/test
      PDK_ROOT: /wrk/sky130_tech/tech/sky130
      PDK: lvs
    steps:
      - uses: actions/checkout@v3
      - name: Build container image
        run: |
          docker build -t "$IMAGE" -f- sky130_tech/tech/sky130 <<EOF
          FROM gcr.io/hdl-containers/klayout

          RUN apt-get update -qq \
           && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends \
              make \
              procps \
              python3-pip \
           && apt-get autoclean && apt-get clean && apt-get -y autoremove \
           && rm -rf /var/lib/apt/lists/*

          RUN --mount=type=bind,target=/tmp/ctx pip3 install -r /tmp/ctx/requirements.txt
          EOF
      - name: Testing ${{ matrix.test }} ${{ matrix.type }} for ${{ matrix.list }}
        run: >
          docker run --rm
          -v $(pwd):/wrk -w /wrk/sky130_tech/tech/sky130/lvs/testing
          -e PDK_ROOT=/wrk/sky130_tech/tech/sky130
          -e PDK=lvs
          "$IMAGE"
          make test_${{ matrix.type }}_${{ matrix.test }}_gha_${{ matrix.list }}
  Connectivity:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        type: [lvs]
        test: [li, m1, m2, m3, m4, m5]
    name: ${{ matrix.type }} | ${{ matrix.test }}
    env:
      IMAGE: ghcr.io/mabrains/sky130_klayout_pdk/test
      PDK_ROOT: /wrk/sky130_tech/tech/sky130
      PDK: lvs
    steps:
      - uses: actions/checkout@v3
      - name: Build container image
        run: |
          docker build -t "$IMAGE" -f- sky130_tech/tech/sky130 <<EOF
          FROM gcr.io/hdl-containers/klayout

          RUN apt-get update -qq \
           && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends \
              make \
              procps \
              python3-pip \
           && apt-get autoclean && apt-get clean && apt-get -y autoremove \
           && rm -rf /var/lib/apt/lists/*

          RUN --mount=type=bind,target=/tmp/ctx pip3 install -r /tmp/ctx/requirements.txt
          EOF
      - name: Testing ${{ matrix.test }} ${{ matrix.type }}
        run: >
          docker run --rm
          -v $(pwd):/wrk -w /wrk/sky130_tech/tech/sky130/lvs/testing
          -e PDK_ROOT=/wrk/sky130_tech/tech/sky130
          -e PDK=lvs
          "$IMAGE"
          make test_conn_${{ matrix.test }}
  Collision:
    runs-on: ubuntu-latest
    name: LVS | Collision
    env:
      IMAGE: ghcr.io/mabrains/sky130_klayout_pdk/test
      PDK_ROOT: /wrk/sky130_tech/tech/sky130
      PDK: lvs
    steps:
      - uses: actions/checkout@v3
      - name: Build container image
        run: |
          docker build -t "$IMAGE" -f- sky130_tech/tech/sky130 <<EOF
          FROM gcr.io/hdl-containers/klayout

          RUN apt-get update -qq \
           && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends \
              make \
              procps \
              python3-pip \
           && apt-get autoclean && apt-get clean && apt-get -y autoremove \
           && rm -rf /var/lib/apt/lists/*

          RUN --mount=type=bind,target=/tmp/ctx pip3 install -r /tmp/ctx/requirements.txt
          EOF
      - name: Testing ${{ matrix.test }} ${{ matrix.type }}
        run: >
          docker run --rm
          -v $(pwd):/wrk -w /wrk/sky130_tech/tech/sky130/lvs/testing
          -e PDK_ROOT=/wrk/sky130_tech/tech/sky130
          -e PDK=lvs
          "$IMAGE"
          make test_lvs_collision
  Standard-Cells:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        type: [lvs]
        test: [hd, hdll, hs, hvl, lp, ls, ms]
    name: LVS | Standard-Cells
    env:
      IMAGE: ghcr.io/mabrains/sky130_klayout_pdk/test
      PDK_ROOT: /wrk/sky130_tech/tech/sky130
      PDK: lvs
    steps:
      - uses: actions/checkout@v3
      - name: Build container image
        run: |
          docker build -t "$IMAGE" -f- sky130_tech/tech/sky130 <<EOF
          FROM gcr.io/hdl-containers/klayout

          RUN apt-get update -qq \
           && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends \
              make \
              procps \
              python3-pip \
           && apt-get autoclean && apt-get clean && apt-get -y autoremove \
           && rm -rf /var/lib/apt/lists/*

          RUN --mount=type=bind,target=/tmp/ctx pip3 install -r /tmp/ctx/requirements.txt
          EOF
      - name: Testing ${{ matrix.test }} for ${{ matrix.type }}_sc
        run: >
          docker run --rm
          -v $(pwd):/wrk -w /wrk/sky130_tech/tech/sky130/lvs/testing
          -e PDK_ROOT=/wrk/sky130_tech/tech/sky130
          -e PDK=lvs
          "$IMAGE"
          make test_${{ matrix.type }}_${{ matrix.test }}_sc
